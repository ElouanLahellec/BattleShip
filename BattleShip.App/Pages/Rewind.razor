@page "/rewind"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>BattleShip</PageTitle>

<div class="container">
    <div class="content">
        @if (_isLoading)
        {
            <h2>Loading game @gameID</h2>
            <span class="loader"></span>
        } else {
            <div class="rewind-controls">
                <button @onclick="SetFirstPlay" disabled="@(_isFirstPlay)">〈〈</button>
                <button @onclick="DecrementPlay" disabled="@(_isFirstPlay)">〈</button>
                <span>Play: @targetPlay</span>
                <button @onclick="IncrementPlay" disabled="@(_isLastPlay)">〉</button>
                <button @onclick="SetLastPlay" disabled="@(_isLastPlay)">〉〉</button>
            </div>
            
            <div class="inline">
                @* playerA grid *@
                <div>
                    <h1>Player A grid</h1>
                    <div class="game-grid">
                        @for (int row = 0; row < gridRows; row++)
                        {
                            <div class="grid-row">
                                @for (int col = 0; col < gridCols; col++)
                                {
                                    <div class="grid-cell@(GetCellState(_playerBPlays, row, col, true) + GetCellPlacementState(_playerATable, row, col))"></div>
                                }
                            </div>
                        }
                    </div>
                </div>

                @* playerB grid *@
                <div>
                    <h1>Player B grid</h1>
                    <div class="game-grid">
                        @for (int row = 0; row < gridRows; row++)
                        {
                            <div class="grid-row">
                                @for (int col = 0; col < gridCols; col++)
                                {
                                    <div class="grid-cell@(GetCellState(_playerAPlays, row, col, false) + GetCellPlacementState(_playerBTable, row, col))"></div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="legends inline">
                <div>
                    <div class="grid-cell"></div>
                    <p>Not shotted</p>
                </div>
                <div>
                    <div class="grid-cell missed"></div>
                    <p>Shot missed</p>
                </div>
                <div>
                    <div class="grid-cell touched"></div>
                    <p>Touched boat</p>
                </div>
                <div>
                    <div class="grid-cell lastplay"></div>
                    <p>Last play</p>
                </div>
            </div>
        }
    </div>
</div>

@code {
    bool _isLoading = true;
    private String gameID = "";
    private int gridRows = 20;
    private int gridCols = 20;

    private int targetPlay = 0;

    private List<List<char>> _playerATable = new ();
    private List<List<char>> _playerBTable = new ();
    private List<List<int>> _playerAPlays = new ();
    private List<List<int>> _playerBPlays = new ();

    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("gameid", out var gameID))
        {
            this.gameID = gameID.ToString();
        }

        if (this.gameID.Length > 0)
        {

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri(Config.API_URL))
                .Build();
            
            _hubConnection.On<List<List<char>>, List<List<char>>, List<List<int>>, List<List<int>>, int, int>("Rewind", (playerAPlacement, playerBPlacement, playerAPlays, playerBPlays, gameGridRows, gameGridCols) =>
            {
                Console.WriteLine("Got game data");
                _playerATable = playerAPlacement;
                _playerBTable = playerBPlacement;
                _playerAPlays = playerAPlays;
                _playerBPlays = playerBPlays;
                gridRows = gameGridRows;
                gridCols = gameGridCols;
                targetPlay = playerAPlays.Count + playerBPlays.Count -1;
                _isLoading = false;
                
                InvokeAsync(StateHasChanged);
            });
            
            await _hubConnection.StartAsync();
            await _hubConnection.SendAsync("Rewind", this.gameID);
            
        }
        Console.WriteLine("Setup done");
    }
    
    private String GetCellState(List<List<int>> plays, int row, int col, bool isPlayerA)
    {
        for (int i = 0; i < (targetPlay + (isPlayerA ? 0 : 1))/2; i++)
        {
            if (plays[i][0] == row && plays[i][1] == col)
            {
                return  i == (targetPlay + (isPlayerA ? -1 : 0))/2 ? " lastplay" : plays[i][2] == 1 ? " touched" : " missed";
            }
        }
        return "";
    }

    private String GetCellPlacementState(List<List<char>> table, int row, int col)
    {
        if (table[row][col] == '\0')
            return "";

        var boatPart = table[row][col];

        // Determine if it's an end or middle part
        bool isEnd = IsBoatEnd(table, row, col, boatPart);

        // Determine the rotation based on the surrounding cells
        string rotationClass = GetBoatRotation(table, row, col, boatPart);

        return (isEnd ? " ship-end" : " ship-middle") + " " + rotationClass;
    }
   
    private bool IsBoatEnd(List<List<char>> table, int row, int col, char boatPart)
    {
        // Check surrounding cells to determine if the current cell is at the end of the boat
        // Adjust conditions to define what constitutes an 'end' (e.g., boundary or different cell).
        int count = 0;
        if (row > 0 && table[row - 1][col] == boatPart) count++;
        if (row < gridRows-1 && table[row + 1][col] == boatPart) count++;
        if (col > 0 && table[row][col - 1] == boatPart) count++;
        if (col < gridCols-1 && table[row][col + 1] == boatPart) count++;
        return count == 1;
    }

    private string GetBoatRotation(List<List<char>> table, int row, int col, char boatPart)
    {
        if (row > 0 && table[row - 1][col] == boatPart)
            return "rotate-down"; // Boat is vertical, down
        if (row < gridRows - 1 && table[row + 1][col] == boatPart)
            return "rotate-up";   // Boat is vertical, up
        if (col > 0 && table[row][col - 1] == boatPart)
            return "rotate-right"; // Boat is horizontal, right
        if (col < gridCols - 1 && table[row][col + 1] == boatPart)
            return "rotate-left";  // Boat is horizontal, left

        return "rotate-right"; // Default rotation
    }
    
    private void SetFirstPlay()
    {
        targetPlay = 0;
        InvokeAsync(StateHasChanged);
    }

    private void SetLastPlay()
    {
        targetPlay = _playerAPlays.Count + _playerBPlays.Count - 1;
        InvokeAsync(StateHasChanged);
    }

    private void DecrementPlay()
    {
        if (targetPlay > 0)
        {
            targetPlay--;
            InvokeAsync(StateHasChanged);
        }
    }

    private void IncrementPlay()
    {
        int maxPlay = _playerAPlays.Count + _playerBPlays.Count - 1;
        if (targetPlay < maxPlay)
        {
            targetPlay++;
            InvokeAsync(StateHasChanged);
        }
    }
    
    private bool _isFirstPlay => targetPlay == 0;
    private bool _isLastPlay => targetPlay >= _playerAPlays.Count + _playerBPlays.Count - 1;
}